
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `User` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model User
 * 
 */
export type UserModel = runtime.Types.Result.DefaultSelection<Prisma.$UserPayload>

export type AggregateUser = {
  _count: UserCountAggregateOutputType | null
  _min: UserMinAggregateOutputType | null
  _max: UserMaxAggregateOutputType | null
}

export type UserMinAggregateOutputType = {
  id: string | null
  displayName: string | null
  firstName: string | null
  lastName: string | null
  email: string | null
  googleId: string | null
  avatarUrl: string | null
  password: string | null
  role: $Enums.UserRole | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserMaxAggregateOutputType = {
  id: string | null
  displayName: string | null
  firstName: string | null
  lastName: string | null
  email: string | null
  googleId: string | null
  avatarUrl: string | null
  password: string | null
  role: $Enums.UserRole | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserCountAggregateOutputType = {
  id: number
  displayName: number
  firstName: number
  lastName: number
  email: number
  googleId: number
  avatarUrl: number
  password: number
  role: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserMinAggregateInputType = {
  id?: true
  displayName?: true
  firstName?: true
  lastName?: true
  email?: true
  googleId?: true
  avatarUrl?: true
  password?: true
  role?: true
  createdAt?: true
  updatedAt?: true
}

export type UserMaxAggregateInputType = {
  id?: true
  displayName?: true
  firstName?: true
  lastName?: true
  email?: true
  googleId?: true
  avatarUrl?: true
  password?: true
  role?: true
  createdAt?: true
  updatedAt?: true
}

export type UserCountAggregateInputType = {
  id?: true
  displayName?: true
  firstName?: true
  lastName?: true
  email?: true
  googleId?: true
  avatarUrl?: true
  password?: true
  role?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which User to aggregate.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Users
  **/
  _count?: true | UserCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends UserAggregateArgs> = {
      [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUser[P]>
    : Prisma.GetScalarType<T[P], AggregateUser[P]>
}




export type UserGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithAggregationInput | Prisma.UserOrderByWithAggregationInput[]
  by: Prisma.UserScalarFieldEnum[] | Prisma.UserScalarFieldEnum
  having?: Prisma.UserScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserCountAggregateInputType | true
  _min?: UserMinAggregateInputType
  _max?: UserMaxAggregateInputType
}

export type UserGroupByOutputType = {
  id: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl: string | null
  password: string | null
  role: $Enums.UserRole
  createdAt: Date
  updatedAt: Date
  _count: UserCountAggregateOutputType | null
  _min: UserMinAggregateOutputType | null
  _max: UserMaxAggregateOutputType | null
}

type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserGroupByOutputType[P]>
      }
    >
  >



export type UserWhereInput = {
  AND?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  OR?: Prisma.UserWhereInput[]
  NOT?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  id?: Prisma.StringFilter<"User"> | string
  displayName?: Prisma.StringFilter<"User"> | string
  firstName?: Prisma.StringFilter<"User"> | string
  lastName?: Prisma.StringFilter<"User"> | string
  email?: Prisma.StringFilter<"User"> | string
  googleId?: Prisma.StringFilter<"User"> | string
  avatarUrl?: Prisma.StringNullableFilter<"User"> | string | null
  password?: Prisma.StringNullableFilter<"User"> | string | null
  role?: Prisma.EnumUserRoleFilter<"User"> | $Enums.UserRole
  createdAt?: Prisma.DateTimeFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string
  complaints?: Prisma.ComplaintListRelationFilter
  responses?: Prisma.ResponseListRelationFilter
  upvoted?: Prisma.ComplaintListRelationFilter
  cities?: Prisma.UserCityListRelationFilter
}

export type UserOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  googleId?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  password?: Prisma.SortOrderInput | Prisma.SortOrder
  role?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  complaints?: Prisma.ComplaintOrderByRelationAggregateInput
  responses?: Prisma.ResponseOrderByRelationAggregateInput
  upvoted?: Prisma.ComplaintOrderByRelationAggregateInput
  cities?: Prisma.UserCityOrderByRelationAggregateInput
  _relevance?: Prisma.UserOrderByRelevanceInput
}

export type UserWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  displayName?: string
  email?: string
  googleId?: string
  AND?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  OR?: Prisma.UserWhereInput[]
  NOT?: Prisma.UserWhereInput | Prisma.UserWhereInput[]
  firstName?: Prisma.StringFilter<"User"> | string
  lastName?: Prisma.StringFilter<"User"> | string
  avatarUrl?: Prisma.StringNullableFilter<"User"> | string | null
  password?: Prisma.StringNullableFilter<"User"> | string | null
  role?: Prisma.EnumUserRoleFilter<"User"> | $Enums.UserRole
  createdAt?: Prisma.DateTimeFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string
  complaints?: Prisma.ComplaintListRelationFilter
  responses?: Prisma.ResponseListRelationFilter
  upvoted?: Prisma.ComplaintListRelationFilter
  cities?: Prisma.UserCityListRelationFilter
}, "id" | "displayName" | "email" | "googleId">

export type UserOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  googleId?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrderInput | Prisma.SortOrder
  password?: Prisma.SortOrderInput | Prisma.SortOrder
  role?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserCountOrderByAggregateInput
  _max?: Prisma.UserMaxOrderByAggregateInput
  _min?: Prisma.UserMinOrderByAggregateInput
}

export type UserScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserScalarWhereWithAggregatesInput | Prisma.UserScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserScalarWhereWithAggregatesInput | Prisma.UserScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"User"> | string
  displayName?: Prisma.StringWithAggregatesFilter<"User"> | string
  firstName?: Prisma.StringWithAggregatesFilter<"User"> | string
  lastName?: Prisma.StringWithAggregatesFilter<"User"> | string
  email?: Prisma.StringWithAggregatesFilter<"User"> | string
  googleId?: Prisma.StringWithAggregatesFilter<"User"> | string
  avatarUrl?: Prisma.StringNullableWithAggregatesFilter<"User"> | string | null
  password?: Prisma.StringNullableWithAggregatesFilter<"User"> | string | null
  role?: Prisma.EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"User"> | Date | string
}

export type UserCreateInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.ComplaintCreateNestedManyWithoutUserInput
  responses?: Prisma.ResponseCreateNestedManyWithoutUserInput
  upvoted?: Prisma.ComplaintCreateNestedManyWithoutUpvotesInput
  cities?: Prisma.UserCityCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.ComplaintUncheckedCreateNestedManyWithoutUserInput
  responses?: Prisma.ResponseUncheckedCreateNestedManyWithoutUserInput
  upvoted?: Prisma.ComplaintUncheckedCreateNestedManyWithoutUpvotesInput
  cities?: Prisma.UserCityUncheckedCreateNestedManyWithoutUserInput
}

export type UserUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.ComplaintUpdateManyWithoutUserNestedInput
  responses?: Prisma.ResponseUpdateManyWithoutUserNestedInput
  upvoted?: Prisma.ComplaintUpdateManyWithoutUpvotesNestedInput
  cities?: Prisma.UserCityUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.ComplaintUncheckedUpdateManyWithoutUserNestedInput
  responses?: Prisma.ResponseUncheckedUpdateManyWithoutUserNestedInput
  upvoted?: Prisma.ComplaintUncheckedUpdateManyWithoutUpvotesNestedInput
  cities?: Prisma.UserCityUncheckedUpdateManyWithoutUserNestedInput
}

export type UserCreateManyInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserOrderByRelevanceInput = {
  fields: Prisma.UserOrderByRelevanceFieldEnum | Prisma.UserOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type UserCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  googleId?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrder
  password?: Prisma.SortOrder
  role?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  googleId?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrder
  password?: Prisma.SortOrder
  role?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  displayName?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  googleId?: Prisma.SortOrder
  avatarUrl?: Prisma.SortOrder
  password?: Prisma.SortOrder
  role?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserScalarRelationFilter = {
  is?: Prisma.UserWhereInput
  isNot?: Prisma.UserWhereInput
}

export type UserListRelationFilter = {
  every?: Prisma.UserWhereInput
  some?: Prisma.UserWhereInput
  none?: Prisma.UserWhereInput
}

export type UserOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type EnumUserRoleFieldUpdateOperationsInput = {
  set?: $Enums.UserRole
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type UserCreateNestedOneWithoutCitiesInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutCitiesInput, Prisma.UserUncheckedCreateWithoutCitiesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutCitiesInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutCitiesNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutCitiesInput, Prisma.UserUncheckedCreateWithoutCitiesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutCitiesInput
  upsert?: Prisma.UserUpsertWithoutCitiesInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutCitiesInput, Prisma.UserUpdateWithoutCitiesInput>, Prisma.UserUncheckedUpdateWithoutCitiesInput>
}

export type UserCreateNestedOneWithoutComplaintsInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutComplaintsInput, Prisma.UserUncheckedCreateWithoutComplaintsInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutComplaintsInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserCreateNestedManyWithoutUpvotedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutUpvotedInput, Prisma.UserUncheckedCreateWithoutUpvotedInput> | Prisma.UserCreateWithoutUpvotedInput[] | Prisma.UserUncheckedCreateWithoutUpvotedInput[]
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutUpvotedInput | Prisma.UserCreateOrConnectWithoutUpvotedInput[]
  connect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
}

export type UserUncheckedCreateNestedManyWithoutUpvotedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutUpvotedInput, Prisma.UserUncheckedCreateWithoutUpvotedInput> | Prisma.UserCreateWithoutUpvotedInput[] | Prisma.UserUncheckedCreateWithoutUpvotedInput[]
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutUpvotedInput | Prisma.UserCreateOrConnectWithoutUpvotedInput[]
  connect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
}

export type UserUpdateOneRequiredWithoutComplaintsNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutComplaintsInput, Prisma.UserUncheckedCreateWithoutComplaintsInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutComplaintsInput
  upsert?: Prisma.UserUpsertWithoutComplaintsInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutComplaintsInput, Prisma.UserUpdateWithoutComplaintsInput>, Prisma.UserUncheckedUpdateWithoutComplaintsInput>
}

export type UserUpdateManyWithoutUpvotedNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutUpvotedInput, Prisma.UserUncheckedCreateWithoutUpvotedInput> | Prisma.UserCreateWithoutUpvotedInput[] | Prisma.UserUncheckedCreateWithoutUpvotedInput[]
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutUpvotedInput | Prisma.UserCreateOrConnectWithoutUpvotedInput[]
  upsert?: Prisma.UserUpsertWithWhereUniqueWithoutUpvotedInput | Prisma.UserUpsertWithWhereUniqueWithoutUpvotedInput[]
  set?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  disconnect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  delete?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  connect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  update?: Prisma.UserUpdateWithWhereUniqueWithoutUpvotedInput | Prisma.UserUpdateWithWhereUniqueWithoutUpvotedInput[]
  updateMany?: Prisma.UserUpdateManyWithWhereWithoutUpvotedInput | Prisma.UserUpdateManyWithWhereWithoutUpvotedInput[]
  deleteMany?: Prisma.UserScalarWhereInput | Prisma.UserScalarWhereInput[]
}

export type UserUncheckedUpdateManyWithoutUpvotedNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutUpvotedInput, Prisma.UserUncheckedCreateWithoutUpvotedInput> | Prisma.UserCreateWithoutUpvotedInput[] | Prisma.UserUncheckedCreateWithoutUpvotedInput[]
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutUpvotedInput | Prisma.UserCreateOrConnectWithoutUpvotedInput[]
  upsert?: Prisma.UserUpsertWithWhereUniqueWithoutUpvotedInput | Prisma.UserUpsertWithWhereUniqueWithoutUpvotedInput[]
  set?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  disconnect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  delete?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  connect?: Prisma.UserWhereUniqueInput | Prisma.UserWhereUniqueInput[]
  update?: Prisma.UserUpdateWithWhereUniqueWithoutUpvotedInput | Prisma.UserUpdateWithWhereUniqueWithoutUpvotedInput[]
  updateMany?: Prisma.UserUpdateManyWithWhereWithoutUpvotedInput | Prisma.UserUpdateManyWithWhereWithoutUpvotedInput[]
  deleteMany?: Prisma.UserScalarWhereInput | Prisma.UserScalarWhereInput[]
}

export type UserCreateNestedOneWithoutResponsesInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutResponsesInput, Prisma.UserUncheckedCreateWithoutResponsesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutResponsesInput
  connect?: Prisma.UserWhereUniqueInput
}

export type UserUpdateOneRequiredWithoutResponsesNestedInput = {
  create?: Prisma.XOR<Prisma.UserCreateWithoutResponsesInput, Prisma.UserUncheckedCreateWithoutResponsesInput>
  connectOrCreate?: Prisma.UserCreateOrConnectWithoutResponsesInput
  upsert?: Prisma.UserUpsertWithoutResponsesInput
  connect?: Prisma.UserWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserUpdateToOneWithWhereWithoutResponsesInput, Prisma.UserUpdateWithoutResponsesInput>, Prisma.UserUncheckedUpdateWithoutResponsesInput>
}

export type UserCreateWithoutCitiesInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.ComplaintCreateNestedManyWithoutUserInput
  responses?: Prisma.ResponseCreateNestedManyWithoutUserInput
  upvoted?: Prisma.ComplaintCreateNestedManyWithoutUpvotesInput
}

export type UserUncheckedCreateWithoutCitiesInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.ComplaintUncheckedCreateNestedManyWithoutUserInput
  responses?: Prisma.ResponseUncheckedCreateNestedManyWithoutUserInput
  upvoted?: Prisma.ComplaintUncheckedCreateNestedManyWithoutUpvotesInput
}

export type UserCreateOrConnectWithoutCitiesInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutCitiesInput, Prisma.UserUncheckedCreateWithoutCitiesInput>
}

export type UserUpsertWithoutCitiesInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutCitiesInput, Prisma.UserUncheckedUpdateWithoutCitiesInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutCitiesInput, Prisma.UserUncheckedCreateWithoutCitiesInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutCitiesInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutCitiesInput, Prisma.UserUncheckedUpdateWithoutCitiesInput>
}

export type UserUpdateWithoutCitiesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.ComplaintUpdateManyWithoutUserNestedInput
  responses?: Prisma.ResponseUpdateManyWithoutUserNestedInput
  upvoted?: Prisma.ComplaintUpdateManyWithoutUpvotesNestedInput
}

export type UserUncheckedUpdateWithoutCitiesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.ComplaintUncheckedUpdateManyWithoutUserNestedInput
  responses?: Prisma.ResponseUncheckedUpdateManyWithoutUserNestedInput
  upvoted?: Prisma.ComplaintUncheckedUpdateManyWithoutUpvotesNestedInput
}

export type UserCreateWithoutComplaintsInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
  responses?: Prisma.ResponseCreateNestedManyWithoutUserInput
  upvoted?: Prisma.ComplaintCreateNestedManyWithoutUpvotesInput
  cities?: Prisma.UserCityCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutComplaintsInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
  responses?: Prisma.ResponseUncheckedCreateNestedManyWithoutUserInput
  upvoted?: Prisma.ComplaintUncheckedCreateNestedManyWithoutUpvotesInput
  cities?: Prisma.UserCityUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutComplaintsInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutComplaintsInput, Prisma.UserUncheckedCreateWithoutComplaintsInput>
}

export type UserCreateWithoutUpvotedInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.ComplaintCreateNestedManyWithoutUserInput
  responses?: Prisma.ResponseCreateNestedManyWithoutUserInput
  cities?: Prisma.UserCityCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutUpvotedInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.ComplaintUncheckedCreateNestedManyWithoutUserInput
  responses?: Prisma.ResponseUncheckedCreateNestedManyWithoutUserInput
  cities?: Prisma.UserCityUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutUpvotedInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutUpvotedInput, Prisma.UserUncheckedCreateWithoutUpvotedInput>
}

export type UserUpsertWithoutComplaintsInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutComplaintsInput, Prisma.UserUncheckedUpdateWithoutComplaintsInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutComplaintsInput, Prisma.UserUncheckedCreateWithoutComplaintsInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutComplaintsInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutComplaintsInput, Prisma.UserUncheckedUpdateWithoutComplaintsInput>
}

export type UserUpdateWithoutComplaintsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  responses?: Prisma.ResponseUpdateManyWithoutUserNestedInput
  upvoted?: Prisma.ComplaintUpdateManyWithoutUpvotesNestedInput
  cities?: Prisma.UserCityUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutComplaintsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  responses?: Prisma.ResponseUncheckedUpdateManyWithoutUserNestedInput
  upvoted?: Prisma.ComplaintUncheckedUpdateManyWithoutUpvotesNestedInput
  cities?: Prisma.UserCityUncheckedUpdateManyWithoutUserNestedInput
}

export type UserUpsertWithWhereUniqueWithoutUpvotedInput = {
  where: Prisma.UserWhereUniqueInput
  update: Prisma.XOR<Prisma.UserUpdateWithoutUpvotedInput, Prisma.UserUncheckedUpdateWithoutUpvotedInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutUpvotedInput, Prisma.UserUncheckedCreateWithoutUpvotedInput>
}

export type UserUpdateWithWhereUniqueWithoutUpvotedInput = {
  where: Prisma.UserWhereUniqueInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutUpvotedInput, Prisma.UserUncheckedUpdateWithoutUpvotedInput>
}

export type UserUpdateManyWithWhereWithoutUpvotedInput = {
  where: Prisma.UserScalarWhereInput
  data: Prisma.XOR<Prisma.UserUpdateManyMutationInput, Prisma.UserUncheckedUpdateManyWithoutUpvotedInput>
}

export type UserScalarWhereInput = {
  AND?: Prisma.UserScalarWhereInput | Prisma.UserScalarWhereInput[]
  OR?: Prisma.UserScalarWhereInput[]
  NOT?: Prisma.UserScalarWhereInput | Prisma.UserScalarWhereInput[]
  id?: Prisma.StringFilter<"User"> | string
  displayName?: Prisma.StringFilter<"User"> | string
  firstName?: Prisma.StringFilter<"User"> | string
  lastName?: Prisma.StringFilter<"User"> | string
  email?: Prisma.StringFilter<"User"> | string
  googleId?: Prisma.StringFilter<"User"> | string
  avatarUrl?: Prisma.StringNullableFilter<"User"> | string | null
  password?: Prisma.StringNullableFilter<"User"> | string | null
  role?: Prisma.EnumUserRoleFilter<"User"> | $Enums.UserRole
  createdAt?: Prisma.DateTimeFilter<"User"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"User"> | Date | string
}

export type UserCreateWithoutResponsesInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.ComplaintCreateNestedManyWithoutUserInput
  upvoted?: Prisma.ComplaintCreateNestedManyWithoutUpvotesInput
  cities?: Prisma.UserCityCreateNestedManyWithoutUserInput
}

export type UserUncheckedCreateWithoutResponsesInput = {
  id?: string
  displayName: string
  firstName: string
  lastName: string
  email: string
  googleId: string
  avatarUrl?: string | null
  password?: string | null
  role?: $Enums.UserRole
  createdAt?: Date | string
  updatedAt?: Date | string
  complaints?: Prisma.ComplaintUncheckedCreateNestedManyWithoutUserInput
  upvoted?: Prisma.ComplaintUncheckedCreateNestedManyWithoutUpvotesInput
  cities?: Prisma.UserCityUncheckedCreateNestedManyWithoutUserInput
}

export type UserCreateOrConnectWithoutResponsesInput = {
  where: Prisma.UserWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCreateWithoutResponsesInput, Prisma.UserUncheckedCreateWithoutResponsesInput>
}

export type UserUpsertWithoutResponsesInput = {
  update: Prisma.XOR<Prisma.UserUpdateWithoutResponsesInput, Prisma.UserUncheckedUpdateWithoutResponsesInput>
  create: Prisma.XOR<Prisma.UserCreateWithoutResponsesInput, Prisma.UserUncheckedCreateWithoutResponsesInput>
  where?: Prisma.UserWhereInput
}

export type UserUpdateToOneWithWhereWithoutResponsesInput = {
  where?: Prisma.UserWhereInput
  data: Prisma.XOR<Prisma.UserUpdateWithoutResponsesInput, Prisma.UserUncheckedUpdateWithoutResponsesInput>
}

export type UserUpdateWithoutResponsesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.ComplaintUpdateManyWithoutUserNestedInput
  upvoted?: Prisma.ComplaintUpdateManyWithoutUpvotesNestedInput
  cities?: Prisma.UserCityUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutResponsesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.ComplaintUncheckedUpdateManyWithoutUserNestedInput
  upvoted?: Prisma.ComplaintUncheckedUpdateManyWithoutUpvotesNestedInput
  cities?: Prisma.UserCityUncheckedUpdateManyWithoutUserNestedInput
}

export type UserUpdateWithoutUpvotedInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.ComplaintUpdateManyWithoutUserNestedInput
  responses?: Prisma.ResponseUpdateManyWithoutUserNestedInput
  cities?: Prisma.UserCityUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateWithoutUpvotedInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  complaints?: Prisma.ComplaintUncheckedUpdateManyWithoutUserNestedInput
  responses?: Prisma.ResponseUncheckedUpdateManyWithoutUserNestedInput
  cities?: Prisma.UserCityUncheckedUpdateManyWithoutUserNestedInput
}

export type UserUncheckedUpdateManyWithoutUpvotedInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  displayName?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  googleId?: Prisma.StringFieldUpdateOperationsInput | string
  avatarUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  role?: Prisma.EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type UserCountOutputType
 */

export type UserCountOutputType = {
  complaints: number
  responses: number
  upvoted: number
  cities: number
}

export type UserCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  complaints?: boolean | UserCountOutputTypeCountComplaintsArgs
  responses?: boolean | UserCountOutputTypeCountResponsesArgs
  upvoted?: boolean | UserCountOutputTypeCountUpvotedArgs
  cities?: boolean | UserCountOutputTypeCountCitiesArgs
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCountOutputType
   */
  select?: Prisma.UserCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountComplaintsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ComplaintWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountResponsesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ResponseWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountUpvotedArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ComplaintWhereInput
}

/**
 * UserCountOutputType without action
 */
export type UserCountOutputTypeCountCitiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserCityWhereInput
}


export type UserSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  displayName?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  googleId?: boolean
  avatarUrl?: boolean
  password?: boolean
  role?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  complaints?: boolean | Prisma.User$complaintsArgs<ExtArgs>
  responses?: boolean | Prisma.User$responsesArgs<ExtArgs>
  upvoted?: boolean | Prisma.User$upvotedArgs<ExtArgs>
  cities?: boolean | Prisma.User$citiesArgs<ExtArgs>
  _count?: boolean | Prisma.UserCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["user"]>

export type UserSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  displayName?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  googleId?: boolean
  avatarUrl?: boolean
  password?: boolean
  role?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["user"]>

export type UserSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  displayName?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  googleId?: boolean
  avatarUrl?: boolean
  password?: boolean
  role?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["user"]>

export type UserSelectScalar = {
  id?: boolean
  displayName?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  googleId?: boolean
  avatarUrl?: boolean
  password?: boolean
  role?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "displayName" | "firstName" | "lastName" | "email" | "googleId" | "avatarUrl" | "password" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
export type UserInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  complaints?: boolean | Prisma.User$complaintsArgs<ExtArgs>
  responses?: boolean | Prisma.User$responsesArgs<ExtArgs>
  upvoted?: boolean | Prisma.User$upvotedArgs<ExtArgs>
  cities?: boolean | Prisma.User$citiesArgs<ExtArgs>
  _count?: boolean | Prisma.UserCountOutputTypeDefaultArgs<ExtArgs>
}
export type UserIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type UserIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $UserPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    complaints: Prisma.$ComplaintPayload<ExtArgs>[]
    responses: Prisma.$ResponsePayload<ExtArgs>[]
    upvoted: Prisma.$ComplaintPayload<ExtArgs>[]
    cities: Prisma.$UserCityPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    displayName: string
    firstName: string
    lastName: string
    email: string
    googleId: string
    avatarUrl: string | null
    password: string | null
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

export type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserPayload, S>

export type UserCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserCountAggregateInputType | true
  }

export interface UserDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
  /**
   * Find zero or one User that matches the filter.
   * @param {UserFindUniqueArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserFindUniqueArgs>(args: Prisma.SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one User that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first User that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindFirstArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserFindFirstArgs>(args?: Prisma.SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first User that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Users that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserFindManyArgs>(args?: Prisma.SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
   */
  create<T extends UserCreateArgs>(args: Prisma.SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Users.
   * @param {UserCreateManyArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const user = await prisma.user.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserCreateManyArgs>(args?: Prisma.SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Users and returns the data saved in the database.
   * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const user = await prisma.user.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Users and only return the `id`
   * const userWithIdOnly = await prisma.user.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
   */
  delete<T extends UserDeleteArgs>(args: Prisma.SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserUpdateArgs>(args: Prisma.SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserUpdateManyArgs>(args: Prisma.SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users and returns the data updated in the database.
   * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Users and only return the `id`
   * const userWithIdOnly = await prisma.user.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
   */
  upsert<T extends UserUpsertArgs>(args: Prisma.SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCountArgs} args - Arguments to filter Users to count.
   * @example
   * // Count the number of Users
   * const count = await prisma.user.count({
   *   where: {
   *     // ... the filter for the Users we want to count
   *   }
   * })
  **/
  count<T extends UserCountArgs>(
    args?: Prisma.Subset<T, UserCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a User.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserAggregateArgs>(args: Prisma.Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

  /**
   * Group by User.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserGroupByArgs['orderBy'] }
      : { orderBy?: UserGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the User model
 */
readonly fields: UserFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  complaints<T extends Prisma.User$complaintsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  responses<T extends Prisma.User$responsesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  upvoted<T extends Prisma.User$upvotedArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$upvotedArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  cities<T extends Prisma.User$citiesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.User$citiesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserCityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the User model
 */
export interface UserFieldRefs {
  readonly id: Prisma.FieldRef<"User", 'String'>
  readonly displayName: Prisma.FieldRef<"User", 'String'>
  readonly firstName: Prisma.FieldRef<"User", 'String'>
  readonly lastName: Prisma.FieldRef<"User", 'String'>
  readonly email: Prisma.FieldRef<"User", 'String'>
  readonly googleId: Prisma.FieldRef<"User", 'String'>
  readonly avatarUrl: Prisma.FieldRef<"User", 'String'>
  readonly password: Prisma.FieldRef<"User", 'String'>
  readonly role: Prisma.FieldRef<"User", 'UserRole'>
  readonly createdAt: Prisma.FieldRef<"User", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"User", 'DateTime'>
}
    

// Custom InputTypes
/**
 * User findUnique
 */
export type UserFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User findUniqueOrThrow
 */
export type UserFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User findFirst
 */
export type UserFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Users.
   */
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User findFirstOrThrow
 */
export type UserFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which User to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Users.
   */
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User findMany
 */
export type UserFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter, which Users to fetch.
   */
  where?: Prisma.UserWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Users.
   */
  cursor?: Prisma.UserWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * User create
 */
export type UserCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The data needed to create a User.
   */
  data: Prisma.XOR<Prisma.UserCreateInput, Prisma.UserUncheckedCreateInput>
}

/**
 * User createMany
 */
export type UserCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Users.
   */
  data: Prisma.UserCreateManyInput | Prisma.UserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * User createManyAndReturn
 */
export type UserCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * The data used to create many Users.
   */
  data: Prisma.UserCreateManyInput | Prisma.UserCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * User update
 */
export type UserUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The data needed to update a User.
   */
  data: Prisma.XOR<Prisma.UserUpdateInput, Prisma.UserUncheckedUpdateInput>
  /**
   * Choose, which User to update.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User updateMany
 */
export type UserUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Users.
   */
  data: Prisma.XOR<Prisma.UserUpdateManyMutationInput, Prisma.UserUncheckedUpdateManyInput>
  /**
   * Filter which Users to update
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to update.
   */
  limit?: number
}

/**
 * User updateManyAndReturn
 */
export type UserUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * The data used to update Users.
   */
  data: Prisma.XOR<Prisma.UserUpdateManyMutationInput, Prisma.UserUncheckedUpdateManyInput>
  /**
   * Filter which Users to update
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to update.
   */
  limit?: number
}

/**
 * User upsert
 */
export type UserUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * The filter to search for the User to update in case it exists.
   */
  where: Prisma.UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
   */
  create: Prisma.XOR<Prisma.UserCreateInput, Prisma.UserUncheckedCreateInput>
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserUpdateInput, Prisma.UserUncheckedUpdateInput>
}

/**
 * User delete
 */
export type UserDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  /**
   * Filter which User to delete.
   */
  where: Prisma.UserWhereUniqueInput
}

/**
 * User deleteMany
 */
export type UserDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Users to delete
   */
  where?: Prisma.UserWhereInput
  /**
   * Limit how many Users to delete.
   */
  limit?: number
}

/**
 * User.complaints
 */
export type User$complaintsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  where?: Prisma.ComplaintWhereInput
  orderBy?: Prisma.ComplaintOrderByWithRelationInput | Prisma.ComplaintOrderByWithRelationInput[]
  cursor?: Prisma.ComplaintWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ComplaintScalarFieldEnum | Prisma.ComplaintScalarFieldEnum[]
}

/**
 * User.responses
 */
export type User$responsesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Response
   */
  select?: Prisma.ResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Response
   */
  omit?: Prisma.ResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResponseInclude<ExtArgs> | null
  where?: Prisma.ResponseWhereInput
  orderBy?: Prisma.ResponseOrderByWithRelationInput | Prisma.ResponseOrderByWithRelationInput[]
  cursor?: Prisma.ResponseWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ResponseScalarFieldEnum | Prisma.ResponseScalarFieldEnum[]
}

/**
 * User.upvoted
 */
export type User$upvotedArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  where?: Prisma.ComplaintWhereInput
  orderBy?: Prisma.ComplaintOrderByWithRelationInput | Prisma.ComplaintOrderByWithRelationInput[]
  cursor?: Prisma.ComplaintWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ComplaintScalarFieldEnum | Prisma.ComplaintScalarFieldEnum[]
}

/**
 * User.cities
 */
export type User$citiesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCity
   */
  select?: Prisma.UserCitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCity
   */
  omit?: Prisma.UserCityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCityInclude<ExtArgs> | null
  where?: Prisma.UserCityWhereInput
  orderBy?: Prisma.UserCityOrderByWithRelationInput | Prisma.UserCityOrderByWithRelationInput[]
  cursor?: Prisma.UserCityWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserCityScalarFieldEnum | Prisma.UserCityScalarFieldEnum[]
}

/**
 * User without action
 */
export type UserDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
}
